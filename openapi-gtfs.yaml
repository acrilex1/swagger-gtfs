openapi: 3.0.3
info:
  version: 1.0.0
  title: GTFS generated models
  description: >-
    Models generated using https://github.com/alexandre-okidoo/swagger-gtfs by Alexandre Croteau

    Portions of this document are reproduced from work created and shared by
    Google and used according to terms described in the Creative Commons 4.0
    Attribution License. Original documentation on which this document is based
    is available at and available at
    https://developers.google.com/transit/gtfs/reference
  license:
    name: Creative Commons Attribution 4.0
    url: "https://creativecommons.org/licenses/by/4.0/"
paths: {}
components:
  schemas:
    color:
      type: string
      format: hex
      pattern: "/^[A-F0-9]{6}$/"
      example: FFFFFF
    currency_code:
      type: string
      format: ISO 4217
      x-faker: finance.currencyCode
      example: CAD
    date:
      type: string
      format: date
      example: "20180913"
    email:
      type: string
      format: email
      x-faker: internet.exampleEmail
      example: example@example.com
    language_code:
      type: string
      format: IETF BCP 47
      x-faker: random.locale
      example: en-US
    latitude:
      type: number
      format: double
      minimum: -90
      maximum: 90
      x-faker: address.latitude
      example: 41.890169
    longitude:
      type: number
      format: double
      minimum: -180
      maximum: 180
      x-faker: address.longitude
      example: 12.492269
    multi_day_time:
      type: string
      format: 'Time from "noon minus 12h", 24h+ format'
      pattern: '^\d{2}:[0-5][0-9]$'
      example: "25:35:00"
    non_negative_float:
      minimum: 0
      type: number
      format: float
    non_negative_integer:
      type: integer
      minimum: 0
    NonNullInteger:
      oneOf:
        - type: integer
          minimum: 1
        - type: integer
          minimum: -1
    phone_number:
      type: string
      format: phone
      x-faker: phone.phoneNumber
    positive_float:
      minimum: 1
      type: number
      format: float
    positive_integer:
      type: integer
      minimum: 1
    text:
      description: Human-readable text
      type: string
      x-faker: lorem.paragraph
    timezone:
      type: string
      format: tz
      pattern: "^[w/]*$"
      example: America/Los_Angeles
    url:
      type: string
      format: url
      x-faker: internet.url
    agency:
      type: object
      required:
        - agency_name
        - agency_url
        - agency_timezone
      properties:
        agency_id:
          type: string
          description: >-
            Identifies a transit brandwhich is often synonymous with a transit
            agency. Note that in some cases, such as when a single agency
            operates multiple separate services, agencies and brands are
            distinct. This document uses the term "agency" in place of "brand".
            A dataset may contain data from multiple agencies. This field is
            required when the dataset contains data for multiple transit
            agencies, otherwise it is optional.
        agency_name:
          $ref: "#/components/schemas/text"
          description: Full name of the transit agency.
        agency_url:
          $ref: "#/components/schemas/url"
          description: URL of the transit agency.
        agency_timezone:
          $ref: "#/components/schemas/timezone"
          description: >-
            Timezone where the transit agency is located. If multiple agencies
            are specified in the dataset, each must have the same
            `agency_timezone`.
        agency_lang:
          $ref: "#/components/schemas/language_code"
          description: >-
            Primary language used by this transit agency. This field helps GTFS
            consumers choose capitalization rules and other language-specific
            settings for the dataset.
        agency_phone:
          $ref: "#/components/schemas/phone_number"
          description: >-
            A voice telephone number for the specified agency. This field is a
            string value that presents the telephone number as typical for the
            agency's service area. It can and should contain punctuation marks
            to group the digits of the number. Dialable text (for example,
            TriMet's "503-238-RIDE") is permitted, but the field must not
            contain any other descriptive text.
        agency_fare_url:
          $ref: "#/components/schemas/url"
          description: >-
            URL of a web page that allows a rider to purchase tickets or other
            fare instruments for that agency online.
        agency_email:
          $ref: "#/components/schemas/email"
          description: >-
            Email address actively monitored by the agency’s customer service
            department. This email address should be a direct contact point
            where transit riders can reach a customer service representative at
            the agency.
    stops:
      type: object
      required:
        - stop_id
      properties:
        stop_id:
          type: string
          description: >-
            Identifies a stop, station, or station entrance.  
              
            The term "station entrance" refers to both station entrances and
            station exits. Stops, stations or station entrances are collectively
            referred to as locations. Multiple routes may use the same stop.
        stop_code:
          $ref: "#/components/schemas/text"
          description: >-
            Short text or a number that identifies the location for riders.
            These codes are often used in phone-based transit information
            systems or printed on signage to make it easier for riders to get
            information for a particular location. The `stop_code` can be the
            same as `stop_id` if it is public facing. This field should be left
            empty for locations without a code presented to riders.
        stop_name:
          $ref: "#/components/schemas/text"
          description: >-
            Name of the location. Use a name that people will understand in the
            local and tourist vernacular.  
              
            When the location is a boarding area (`location_type=4`), the
            `stop_name` should contains the name of the boarding area as
            displayed by the agency. It could be just one letter (like on some
            European intercity railway stations), or text like “Wheelchair
            boarding area” (NYC’s Subway) or “Head of short trains” (Paris’
            RER).  
              
            Conditionally Required:  

            • **Required** for locations which are stops (`location_type=0`),
            stations (`location_type=1`) or entrances/exits
            (`location_type=2`).  

            • Optional for locations which are generic nodes (`location_type=3`)
            or boarding areas (`location_type=4`).
        stop_desc:
          $ref: "#/components/schemas/text"
          description: >-
            Description of the location that provides useful, quality
            information. Do not simply duplicate the name of the location.
        stop_lat:
          $ref: "#/components/schemas/latitude"
          description: >-
            Latitude of the location.  
              
            Conditionally Required:  

            • **Required** for locations which are stops (`location_type=0`),
            stations (`location_type=1`) or entrances/exits
            (`location_type=2`).  

            • Optional for locations which are generic nodes (`location_type=3`)
            or boarding areas (`location_type=4`).
        stop_lon:
          $ref: "#/components/schemas/longitude"
          description: >-
            Longitude of the location.  
              
            Conditionally Required:  

            • **Required** for locations which are stops (`location_type=0`),
            stations (`location_type=1`) or entrances/exits
            (`location_type=2`).  

            • Optional for locations which are generic nodes (`location_type=3`)
            or boarding areas (`location_type=4`).
        zone_id:
          type: string
          description: >-
            Identifies the fare zone for a stop. This field is required if
            providing fare information using
            [fare\_rules.txt](https://developers.google.com/transit/gtfs/reference#fare_rulestxt),
            otherwise it is optional. If this record represents a station or
            station entrance, the `zone_id` is ignored.
        stop_url:
          $ref: "#/components/schemas/url"
          description: >-
            URL of a web page about the location. This should be different from
            the `agency.agency_url` and the `routes.route_url` field values.
        location_type:
          type: string
          enum:
            - null
            - "0"
            - "1"
            - "2"
            - "3"
            - "4"
          description: >-
            Type of the location:  

            • `0` (or empty): **Stop** (or **Platform**). A location where
            passengers board or disembark from a transit vehicle. Is called a
            platform when defined within a `parent_station`.  

            • `1`: **Station**. A physical structure or area that contains one
            or more platform.  

            • `2`: **Entrance/Exit**. A location where passengers can enter or
            exit a station from the street. If an entrance/exit belongs to
            multiple stations, it can be linked by pathways to both, but the
            data provider must pick one of them as parent.  

            • `3`: **Generic Node**. A location within a station, not matching
            any other `location_type`, which can be used to link together
            pathways define in pathways.txt.  

            • `4`: **Boarding Area**. A specific location on a platform, where
            passengers can board and/or alight vehicles.
        parent_station:
          type: string
          description: >-
            Defines hierarchy between the different locations defined in
            `stops.txt`. It contains the ID of the parent location, as
            followed:  

            • **Stop/platform** (`location_type=0`): the `parent_station` field
            contains the ID of a station.  

            • **Station** (`location_type=1`): this field must be empty.  

            • **Entrance/exit** (`location_type=2`) or **generic node**
            (`location_type=3`): the `parent_station` field contains the ID of a
            station (`location_type=1`)  

            • **Boarding Area** (`location_type=4`): the `parent_station` field
            contains ID of a platform.  
              
            Conditionally Required:  

            • **Required** for locations which are entrances
            (`location_type=2`), generic nodes (`location_type=3`) or boarding
            areas (`location_type=4`).  

            • Optional for stops/platforms (`location_type=0`).  

            • Forbidden for stations (`location_type=1`).
        stop_timezone:
          $ref: "#/components/schemas/timezone"
          description: >-
            Timezone of the location. If the location has a parent station, it
            inherits the parent station’s timezone instead of applying its own.
            Stations and parentless stops with empty `stop_timezone` inherit the
            timezone specified by `agency.agency_timezone`. If `stop_timezone`
            values are provided, the times in
            [stop\_times.txt](https://developers.google.com/transit/gtfs/reference#stop_timestxt)
            should be entered as the time since midnight in the timezone
            specified by `agency.agency_timezone`. This ensures that the time
            values in a trip always increase over the course of a trip,
            regardless of which timezones the trip crosses.
        wheelchair_boarding:
          type: string
          enum:
            - "0"
            - "1"
            - "2"
          description: >-
            Indicates whether wheelchair boardings are possible from the
            location. Valid options are:  
              
            For parentless stops:  

            `0` or empty - No accessibility information for the stop.  

            `1` - Some vehicles at this stop can be boarded by a rider in a
            wheelchair.  

            `2` - Wheelchair boarding is not possible at this stop.  
              
            For child stops:  

            `0` or empty - Stop will inherit its `wheelchair_boarding` behavior
            from the parent station, if specified in the parent.  

            `1` - There exists some accessible path from outside the station to
            the specific stop/platform.  

            `2` - There exists no accessible path from outside the station to
            the specific stop/platform.  
              
            For station entrances/exits:  

            `0` or empty - Station entrance will inherit its
            `wheelchair_boarding` behavior from the parent station, if specified
            for the parent.  

            `1` - Station entrance is wheelchair accessible.  

            `2` - No accessible path from station entrance to stops/platforms.
        level_id:
          type: string
          description: >-
            Level of the location. The same level can be used by multiple
            unlinked stations.
        platform_code:
          $ref: "#/components/schemas/text"
          description: >-
            Platform identifier for a platform stop (a stop belonging to a
            station). This should be just the platform identifier (eg. "G" or
            "3"). Words like “platform” or "track" (or the feed’s
            language-specific equivalent) should not be included. This allows
            feed consumers to more easily internationalize and localize the
            platform identifier into other languages.
    routes:
      type: object
      required:
        - route_id
        - route_type
      properties:
        route_id:
          type: string
          description: Identifies a route.
        agency_id:
          type: string
          description: >-
            Agency for the specified route. This field is required when the
            dataset provides data for routes from more than one agency in
            [agency.txt](https://developers.google.com/transit/gtfs/reference#agencytxt),
            otherwise it is optional.
        route_short_name:
          $ref: "#/components/schemas/text"
          description: >-
            Short name of a route. This will often be a short, abstract
            identifier like "32", "100X", or "Green" that riders use to identify
            a route, but which doesn't give any indication of what places the
            route serves. Either `route_short_name` or `route_long_name` must be
            specified, or potentially both if appropriate.
        route_long_name:
          $ref: "#/components/schemas/text"
          description: >-
            Full name of a route. This name is generally more descriptive than
            the `route_short_name` and often includes the route's destination or
            stop. Either `route_short_name` or `route_long_name` must be
            specified, or potentially both if appropriate.
        route_desc:
          $ref: "#/components/schemas/text"
          description: >-
            Description of a route that provides useful, quality information. Do
            not simply duplicate the name of the route.


            * * *


            _Example: "A" trains operate between Inwood-207 St, Manhattan and
            Far Rockaway-Mott Avenue, Queens at all times. Also from about 6AM
            until about midnight, additional "A" trains operate between
            Inwood-207 St and Lefferts Boulevard (trains typically alternate
            between Lefferts Blvd and Far Rockaway)._
        route_type:
          type: string
          enum:
            - "0"
            - "1"
            - "3"
            - "4"
            - "5"
            - "6"
            - "7"
            - "11"
            - "12"
          description: >-
            Indicates the type of transportation used on a route. Valid options
            are:  
              
            `0` - Tram, Streetcar, Light rail. Any light rail or street level
            system within a metropolitan area.  

            `1` - Subway, Metro. Any underground rail system within a
            metropolitan area.  

            `2` - Rail. Used for intercity or long-distance travel.  

            `3` - Bus. Used for short- and long-distance bus routes.  

            `4` - Ferry. Used for short- and long-distance boat service.  

            `5` - Cable tram. Used for street-level rail cars where the cable
            runs beneath the vehicle, e.g., cable car in San Francisco.  

            `6` - Aerial lift, suspended cable car (e.g., gondola lift, aerial
            tramway). Cable transport where cabins, cars, gondolas or open
            chairs are suspended by means of one or more cables.  

            `7` - Funicular. Any rail system designed for steep inclines.  

            `11` - Trolleybus. Electric buses that draw power from overhead
            wires using poles.  

            `12` - Monorail. Railway in which the track consists of a single
            rail or a beam.
        route_url:
          $ref: "#/components/schemas/url"
          description: >-
            URL of a web page about the particular route. Should be different
            from the `agency.agency_url` value.
        route_color:
          $ref: "#/components/schemas/color"
          description: >-
            Route color designation that matches public facing material.
            Defaults to white (`FFFFFF`) when omitted or left empty. The color
            difference between `route_color` and `route_text_color` should
            provide sufficient contrast when viewed on a black and white screen.
        route_text_color:
          $ref: "#/components/schemas/color"
          description: >-
            Legible color to use for text drawn against a background of
            `route_color`. Defaults to black (`000000`) when omitted or left
            empty. The color difference between `route_color` and
            `route_text_color` should provide sufficient contrast when viewed on
            a black and white screen.
        route_sort_order:
          $ref: "#/components/schemas/non_negative_integer"
          description: >-
            Orders the routes in a way which is ideal for presentation to
            customers. Routes with smaller `route_sort_order` values should be
            displayed first.
        continuous_pickup:
          type: string
          enum:
            - "0"
            - "1"
            - "2"
            - "3"
          description: >-
            Indicates whether a rider can board the transit vehicle anywhere
            along the vehicle’s travel path. The path is described by
            [`shapes.txt`](https://developers.google.com/transit/gtfs/reference#shapestxt)
            on every trip of the route. Valid options are:  
              
            `0` - Continuous stopping pickup.  

            `1` or empty - No continuous stopping pickup.  

            `2` - Must phone an agency to arrange continuous stopping pickup.  

            `3` - Must coordinate with a driver to arrange continuous stopping
            pickup.  
              
            The default continuous pickup behavior defined in `routes.txt` can
            be overridden in
            [`stop_times.txt`](https://developers.google.com/transit/gtfs/reference#stop_timestxt).
        continuous_drop_off:
          type: string
          enum:
            - "0"
            - "1"
            - "2"
            - "3"
          description: >-
            Indicates whether a rider can alight from the transit vehicle at any
            point along the vehicle’s travel path. The path is described by
            `shapes.txt` on every trip of the route. Valid options are:  
              
            `0`\- Continuous stopping drop-off.  

            `1` or empty - No continuous stopping drop-off.  

            `2` - Must phone an agency to arrange continuous stopping
            drop-off.  

            `3` - Must coordinate with a driver to arrange continuous stopping
            drop-off.  
              
            The default continuous drop-off behavior defined in `routes.txt` can
            be overridden in `stop_times.txt`.
    trips:
      type: object
      required:
        - route_id
        - service_id
        - trip_id
      properties:
        route_id:
          type: string
          description: Identifies a route.
        service_id:
          type: string
          description: >-
            Identifies a set of dates when service is available for one or more
            routes.
        trip_id:
          type: string
          description: Identifies a trip.
        trip_headsign:
          $ref: "#/components/schemas/text"
          description: >-
            Text that appears on signage identifying the trip's destination to
            riders. Use this field to distinguish between different patterns of
            service on the same route. If the headsign changes during a trip,
            `trip_headsign` can be overridden by specifying values for the
            `stop_times.stop_headsign`.
        trip_short_name:
          $ref: "#/components/schemas/text"
          description: >-
            Public facing text used to identify the trip to riders, for
            instance, to identify train numbers for commuter rail trips. If
            riders do not commonly rely on trip names, leave this field empty. A
            `trip_short_name` value, if provided, should uniquely identify a
            trip within a service day; it should not be used for destination
            names or limited/express designations.
        direction_id:
          type: string
          enum:
            - "0"
            - "1"
          description: >-
            Indicates the direction of travel for a trip. This field is not used
            in routing; it provides a way to separate trips by direction when
            publishing time tables. Valid options are:  
              
            `0` - Travel in one direction (e.g. outbound travel).  

            `1` - Travel in the opposite direction (e.g. inbound travel).


            * * *


            _Example: The `trip_headsign` and `direction_id` fields could be
            used together to assign a name to travel in each direction for a set
            of trips. A
            [trips.txt](https://developers.google.com/transit/gtfs/reference#tripstxt)
            file could contain these records for use in time tables:_  

            `trip_id,...,trip_headsign,direction_id`  

            `1234,...,Airport,0`  

            `1505,...,Downtown,1`
        block_id:
          type: string
          description: >-
            Identifies the block to which the trip belongs. A block consists of
            a single trip or many sequential trips made using the same vehicle,
            defined by shared service days and `block_id`. A `block_id` can have
            trips with different service days, making distinct blocks. See the
            [example
            below](https://developers.google.com/transit/gtfs/reference#example-blocks-and-service-day)
        shape_id:
          type: string
          description: >-
            Identifies a geospatial shape that describes the vehicle travel path
            for a trip.  
              
            Conditionally required:  

            This field is required if the trip has continuous behavior defined,
            either at the route level or at the stop time level.  

            Otherwise, it's optional.
        wheelchair_accessible:
          type: string
          enum:
            - "0"
            - "1"
            - "2"
          description: >-
            Indicates wheelchair accessibility. Valid options are:  
              
            `0` or empty - No accessibility information for the trip.  

            `1` - Vehicle being used on this particular trip can accommodate at
            least one rider in a wheelchair.  

            `2` - No riders in wheelchairs can be accommodated on this trip.
        bikes_allowed:
          type: string
          enum:
            - "0"
            - "1"
            - "2"
          description: >-
            Indicates whether bikes are allowed. Valid options are:  
              
            `0` or empty - No bike information for the trip.  

            `1` - Vehicle being used on this particular trip can accommodate at
            least one bicycle.  

            `2` - No bicycles are allowed on this trip.
    stop_times:
      type: object
      required:
        - trip_id
        - stop_id
        - stop_sequence
      properties:
        trip_id:
          type: string
          description: Identifies a trip.
        arrival_time:
          $ref: "#/components/schemas/multi_day_time"
          description: >-
            Arrival time at a specific stop for a specific trip on a route. If
            there are not separate times for arrival and departure at a stop,
            enter the same value for `arrival_time` and `departure_time`. For
            times occurring after midnight on the service day, enter the time as
            a value greater than 24:00:00 in HH:MM:SS local time for the day on
            which the trip schedule begins.  
              
            Scheduled stops where the vehicle strictly adheres to the specified
            arrival and departure times are timepoints. If this stop is not a
            timepoint, it is recommended to provide an estimated or interpolated
            time. If this is not available, arrival\_time can be left empty.
            Further, indicate that interpolated times are provided with
            `timepoint`\=`0`. If interpolated times are indicated with
            `timepoint`\=`0`, then time points must be indicated with
            `timepoint`\=`1`. Provide arrival times for all stops that are time
            points. An arrival time must be specified for the first and the last
            stop in a trip.
        departure_time:
          $ref: "#/components/schemas/multi_day_time"
          description: >-
            Departure time from a specific stop for a specific trip on a route.
            For times occurring after midnight on the service day, enter the
            time as a value greater than 24:00:00 in HH:MM:SS local time for the
            day on which the trip schedule begins. If there are not separate
            times for arrival and departure at a stop, enter the same value for
            `arrival_time` and `departure_time`. See the `arrival_time`
            description for more details about using timepoints correctly.  
              
            The `departure_time` field should specify time values whenever
            possible, including non-binding estimated or interpolated times
            between timepoints.
        stop_id:
          type: string
          description: >-
            Identifies the serviced stop. All stops serviced during a trip must
            have a record in
            [stop\_times.txt](https://developers.google.com/transit/gtfs/reference#stop_timestxt).
            Referenced locations must be stops, not stations or station
            entrances. A stop may be serviced multiple times in the same trip,
            and multiple trips and routes may service the same stop.
        stop_sequence:
          $ref: "#/components/schemas/non_negative_integer"
          description: >-
            Order of stops for a particular trip. The values must increase along
            the trip but do not need to be consecutive.


            * * *


            _Example: The first location on the trip could have a
            `stop_sequence`\=`1`, the second location on the trip could have a
            `stop_sequence`\=`23`, the third location could have a
            `stop_sequence`\=`40`, and so on._
        stop_headsign:
          $ref: "#/components/schemas/text"
          description: >-
            Text that appears on signage identifying the trip's destination to
            riders. This field overrides the default `trips.trip_headsign` when
            the headsign changes between stops. If the headsign is displayed for
            an entire trip, use `trips.trip_headsign` instead.  
              
            A `stop_headsign` value specified for one `stop_time` does not apply
            to subsequent `stop_time`s in the same trip. If you want to override
            the `trip_headsign` for multiple `stop_time`s in the same trip, the
            `stop_headsign` value must be repeated in each `stop_time` row.
        pickup_type:
          type: string
          enum:
            - "0"
            - "1"
            - "2"
            - "3"
          description: |-
            Indicates pickup method. Valid options are:  
              
            `0` or empty - Regularly scheduled pickup.  
            `1` - No pickup available.  
            `2` - Must phone agency to arrange pickup.  
            `3` - Must coordinate with driver to arrange pickup.
        drop_off_type:
          type: string
          enum:
            - "0"
            - "1"
            - "2"
            - "3"
          description: |-
            Indicates drop off method. Valid options are:  
              
            `0` or empty - Regularly scheduled drop off.  
            `1` - No drop off available.  
            `2` - Must phone agency to arrange drop off.  
            `3` - Must coordinate with driver to arrange drop off.
        continuous_pickup:
          type: string
          enum:
            - "0"
            - "1"
            - "2"
            - "3"
          description: >-
            Indicates whether a rider can board the transit vehicle at any point
            along the vehicle’s travel path. The path is described by
            `shapes.txt`, from this `stop_time` to the next `stop_time` in the
            trip’s `stop_sequence`. Valid options are:  
              
            `0` - Continuous stopping pickup.  

            `1` or empty - No continuous stopping pickup.  

            `2` - Must phone an agency to arrange continuous pickup.  

            `3` - Must coordinate with a driver to arrange continuous stopping
            pickup.  
              
            The continuous pickup behavior indicated in `stop_times.txt`
            overrides any behavior defined in `routes.txt`.
        continuous_drop_off:
          type: string
          enum:
            - "0"
            - "1"
            - "2"
            - "3"
          description: >-
            Indicates whether a rider can alight from the transit vehicle at any
            point along the vehicle’s travel path as described by `shapes.txt`,
            from this `stop_time` to the next `stop_time` in the trip’s
            `stop_sequence`.  
              
            `0` - Continuous stopping drop off.  

            `1` or empty - No continuous stopping drop off.  

            `2` - Must phone an agency to arrange continuous drop off.  

            `3` - Must coordinate with a driver to arrange continuous stopping
            drop off.  
              
            The continuous drop-off behavior indicated in `stop_times.txt`
            overrides any behavior defined in `routes.txt`.
        shape_dist_traveled:
          $ref: "#/components/schemas/non_negative_float"
          description: >-
            Actual distance traveled along the associated shape, from the first
            stop to the stop specified in this record. This field specifies how
            much of the shape to draw between any two stops during a trip. Must
            be in the same units used in
            [shapes.txt](https://developers.google.com/transit/gtfs/reference#shapestxt).
            Values used for `shape_dist_traveled` must increase along with
            `stop_sequence`; they cannot be used to show reverse travel along a
            route.


            * * *


            _Example: If a bus travels a distance of 5.25 kilometers from the
            start of the shape to the stop,`shape_dist_traveled`\=`5.25`._
        timepoint:
          type: string
          enum:
            - null
            - "0"
            - "1"
          description: >-
            Indicates if arrival and departure times for a stop are strictly
            adhered to by the vehicle or if they are instead approximate and/or
            interpolated times. This field allows a GTFS producer to provide
            interpolated stop-times, while indicating that the times are
            approximate. Valid options are:  
              
            `0` - Times are considered approximate.  

            `1` or empty - Times are considered exact.
    calendar:
      type: object
      required:
        - service_id
        - monday
        - tuesday
        - wednesday
        - thursday
        - friday
        - saturday
        - sunday
        - start_date
        - end_date
      properties:
        service_id:
          type: string
          description: >-
            Uniquely identifies a set of dates when service is available for one
            or more routes. Each `service_id` value can appear at most once in a
            [calendar.txt](https://developers.google.com/transit/gtfs/reference#calendartxt)
            file.
        monday:
          $ref: "#/CalendarDay"
        tuesday:
          $ref: "#/CalendarDay"
        wednesday:
          $ref: "#/CalendarDay"
        thursday:
          $ref: "#/CalendarDay"
        friday:
          $ref: "#/CalendarDay"
        saturday:
          $ref: "#/CalendarDay"
        sunday:
          $ref: "#/CalendarDay"
        start_date:
          $ref: "#/components/schemas/date"
          description: Start service day for the service interval.
        end_date:
          $ref: "#/components/schemas/date"
          description: >-
            End service day for the service interval. This service day is
            included in the interval.
    calendar_dates:
      type: object
      required:
        - service_id
        - date
        - exception_type
      properties:
        service_id:
          type: string
          description: >-
            Identifies a set of dates when a service exception occurs for one or
            more routes. Each (`service_id`, `date`) pair can only appear once
            in
            [calendar\_dates.txt](https://developers.google.com/transit/gtfs/reference#calendar_datestxt)
            if using
            [calendar.txt](https://developers.google.com/transit/gtfs/reference#calendartxt)
            and
            [calendar\_dates.txt](https://developers.google.com/transit/gtfs/reference#calendar_datestxt)
            in conjunction. If a `service_id` value appears in both
            [calendar.txt](https://developers.google.com/transit/gtfs/reference#calendartxt)
            and
            [calendar\_dates.txt](https://developers.google.com/transit/gtfs/reference#calendar_datestxt),
            the information in
            [calendar\_dates.txt](https://developers.google.com/transit/gtfs/reference#calendar_datestxt)
            modifies the service information specified in
            [calendar.txt](https://developers.google.com/transit/gtfs/reference#calendartxt).
        date:
          $ref: "#/components/schemas/date"
          description: Date when service exception occurs.
        exception_type:
          type: string
          enum:
            - "1"
            - "2"
          description: >-
            Indicates whether service is available on the date specified in the
            date field. Valid options are:  
              
            `1` - Service has been added for the specified date.  

            `2` - Service has been removed for the specified date.


            * * *


            _Example: Suppose a route has one set of trips available on holidays
            and another set of trips available on all other days. One
            `service_id` could correspond to the regular service schedule and
            another `service_id` could correspond to the holiday schedule. For a
            particular holiday, the
            [calendar\_dates.txt](https://developers.google.com/transit/gtfs/reference#calendar_datestxt)
            file could be used to add the holiday to the holiday `service_id`
            and to remove the holiday from the regular `service_id` schedule._
    fare_attributes:
      type: object
      required:
        - fare_id
        - price
        - currency_type
        - payment_method
        - transfers
      properties:
        fare_id:
          type: string
          description: Identifies a fare class.
        price:
          $ref: "#/components/schemas/non_negative_float"
          description: "Fare price, in the unit specified by `currency_type`."
        currency_type:
          $ref: "#/components/schemas/currency_code"
          description: Currency used to pay the fare.
        payment_method:
          type: string
          enum:
            - "0"
            - "1"
          description: |-
            Indicates when the fare must be paid. Valid options are:  
              
            `0` - Fare is paid on board.  
            `1` - Fare must be paid before boarding.
        transfers:
          type: string
          enum:
            - null
            - "0"
            - "1"
            - "2"
          description: >-
            Indicates the number of transfers permitted on this fare. The fact
            that this field can be left empty is an exception to the requirement
            that a Required field must not be empty. Valid options are:  
              
            `0` - No transfers permitted on this fare.  

            `1` - Riders may transfer once.  

            `2` - Riders may transfer twice.  

            empty - Unlimited transfers are permitted.
        agency_id:
          type: string
          description: >-
            Identifies the relevant agency for a fare. This field is required
            for datasets with multiple agencies defined in
            [agency.txt](https://developers.google.com/transit/gtfs/reference#agencytxt),
            otherwise it is optional.
        transfer_duration:
          $ref: "#/components/schemas/non_negative_integer"
          description: >-
            Length of time in seconds before a transfer expires. When
            `transfers`\=`0` this field can be used to indicate how long a
            ticket is valid for or it can can be left empty.
    fare_rules:
      type: object
      required:
        - fare_id
      properties:
        fare_id:
          type: string
          description: Identifies a fare class.
        route_id:
          type: string
          description: >-
            Identifies a route associated with the fare class. If several routes
            with the same fare attributes exist, create a record in
            [fare\_rules.txt](https://developers.google.com/transit/gtfs/reference#fare_rulestxt)
            for each route.


            * * *


            _Example: If fare class "b" is valid on route "TSW" and "TSE", the
            [fare\_rules.txt](https://developers.google.com/transit/gtfs/reference#fare_rulestxt)
            file would contain these records for the fare class:_  

            `fare_id,route_id`  

            `b,TSW`  

            `b,TSE`
        origin_id:
          type: string
          description: >-
            Identifies an origin zone. If a fare class has multiple origin
            zones, create a record in
            [fare\_rules.txt](https://developers.google.com/transit/gtfs/reference#fare_rulestxt)
            for each `origin_id`.


            * * *


            _Example: If fare class "b" is valid for all travel originating from
            either zone "2" or zone "8", the
            [fare\_rules.txt](https://developers.google.com/transit/gtfs/reference#fare_rulestxt)
            file would contain these records for the fare class:_  

            `fare_id,...,origin_id`  

            `b,...,2`  

            `b,...,8`
        destination_id:
          type: string
          description: >-
            Identifies a destination zone. If a fare class has multiple
            destination zones, create a record in
            [fare\_rules.txt](https://developers.google.com/transit/gtfs/reference#fare_rulestxt)
            for each `destination_id`.


            * * *


            _Example: The `origin_id` and `destination_id` fields could be used
            together to specify that fare class "b" is valid for travel between
            zones 3 and 4, and for travel between zones 3 and 5, the
            [fare\_rules.txt](https://developers.google.com/transit/gtfs/reference#fare_rulestxt)
            file would contain these records for the fare class:_  

            `fare_id,...,origin_id,destination_id`  

            `b,...,3,4`  

            `b,...,3,5`
        contains_id:
          type: string
          description: >-
            Identifies the zones that a rider will enter while using a given
            fare class. Used in some systems to calculate correct fare class.


            * * *


            _Example: If fare class "c" is associated with all travel on the GRT
            route that passes through zones 5, 6, and 7 the
            [fare\_rules.txt](https://developers.google.com/transit/gtfs/reference#fare_rulestxt)
            would contain these records:_  

            `fare_id,route_id,...,contains_id`  

            `c,GRT,...,5`  

            `c,GRT,...,6`  

            `c,GRT,...,7`  

            _Because all `contains_id` zones must be matched for the fare to
            apply, an itinerary that passes through zones 5 and 6 but not zone 7
            would not have fare class "c". For more detail, see
            [https://code.google.com/p/googletransitdatafeed/wiki/FareExamples](https://code.google.com/p/googletransitdatafeed/wiki/FareExamples)
            in the GoogleTransitDataFeed project wiki._
    shapes:
      type: object
      required:
        - shape_id
        - shape_pt_lat
        - shape_pt_lon
        - shape_pt_sequence
      properties:
        shape_id:
          type: string
          description: Identifies a shape.
        shape_pt_lat:
          $ref: "#/components/schemas/latitude"
          description: >-
            Latitude of a shape point. Each record in
            [shapes.txt](https://developers.google.com/transit/gtfs/reference#shapestxt)
            represents a shape point used to define the shape.
        shape_pt_lon:
          $ref: "#/components/schemas/longitude"
          description: Longitude of a shape point.
        shape_pt_sequence:
          $ref: "#/components/schemas/non_negative_integer"
          description: >-
            Sequence in which the shape points connect to form the shape. Values
            must increase along the trip but do not need to be consecutive.


            * * *


            _Example: If the shape "A\_shp" has three points in its definition,
            the
            [shapes.txt](https://developers.google.com/transit/gtfs/reference#shapestxt)
            file might contain these records to define the shape:_  

            `shape_id,shape_pt_lat,shape_pt_lon,shape_pt_sequence`  

            `A_shp,37.61956,-122.48161,0`  

            `A_shp,37.64430,-122.41070,6`  

            `A_shp,37.65863,-122.30839,11`
        shape_dist_traveled:
          $ref: "#/components/schemas/non_negative_float"
          description: >-
            Actual distance traveled along the shape from the first shape point
            to the point specified in this record. Used by trip planners to show
            the correct portion of the shape on a map. Values must increase
            along with `shape_pt_sequence`; they cannot be used to show reverse
            travel along a route. Distance units must be consistent with those
            used in
            [stop\_times.txt](https://developers.google.com/transit/gtfs/reference#stop_timestxt).


            * * *


            _Example: If a bus travels along the three points defined above for
            A\_shp, the additional `shape_dist_traveled` values (shown here in
            kilometers) would look like this:_  

            `shape_id,shape_pt_lat,shape_pt_lon,shape_pt_sequence,shape_dist_traveled`  

            `A_shp,37.61956,-122.48161,0,0`  

            `A_shp,37.64430,-122.41070,6,6.8310`  

            `A_shp,37.65863,-122.30839,11,15.8765`
    frequencies:
      type: object
      required:
        - trip_id
        - start_time
        - end_time
        - headway_secs
      properties:
        trip_id:
          type: string
          description: Identifies a trip to which the specified headway of service applies.
        start_time:
          $ref: "#/components/schemas/multi_day_time"
          description: >-
            Time at which the first vehicle departs from the first stop of the
            trip with the specified headway.
        end_time:
          $ref: "#/components/schemas/multi_day_time"
          description: >-
            Time at which service changes to a different headway (or ceases) at
            the first stop in the trip.
        headway_secs:
          $ref: "#/components/schemas/non_negative_integer"
          description: >-
            Time, in seconds, between departures from the same stop (headway)
            for the trip, during the time interval specified by `start_time` and
            `end_time`. Multiple headways for the same trip are allowed, but may
            not overlap. New headways may start at the exact time the previous
            headway ends.
        exact_times:
          type: string
          enum:
            - "0"
            - "1"
          description: >-
            Indicates the type of service for a trip. See the file description
            for more information. Valid options are:  
              
            `0` or empty - Frequency-based trips.  

            `1` - Schedule-based trips with the exact same headway throughout
            the day. In this case the `end_time` value must be greater than the
            last desired trip `start_time` but less than the last desired trip
            start\_time + `headway_secs`.
    transfers:
      type: object
      required:
        - from_stop_id
        - to_stop_id
        - transfer_type
      properties:
        from_stop_id:
          type: string
          description: >-
            Identifies a stop or station where a connection between routes
            begins. If this field refers to a station, the transfer rule applies
            to all its child stops.
        to_stop_id:
          type: string
          description: >-
            Identifies a stop or station where a connection between routes ends.
            If this field refers to a station, the transfer rule applies to all
            child stops.
        transfer_type:
          type: string
          enum:
            - "0"
            - "1"
            - "2"
            - "3"
          description: >-
            Indicates the type of connection for the specified (`from_stop_id`,
            `to_stop_id`) pair. Valid options are:  
              
            `0` or empty - Recommended transfer point between routes.  

            `1` - Timed transfer point between two routes. The departing vehicle
            is expected to wait for the arriving one and leave sufficient time
            for a rider to transfer between routes.  

            `2` - Transfer requires a minimum amount of time between arrival and
            departure to ensure a connection. The time required to transfer is
            specified by `min_transfer_time`.  

            `3` - Transfers are not possible between routes at the location.
        min_transfer_time:
          $ref: "#/components/schemas/non_negative_integer"
          description: >-
            Amount of time, in seconds, that must be available to permit a
            transfer between routes at the specified stops. The
            `min_transfer_time` should be sufficient to permit a typical rider
            to move between the two stops, including buffer time to allow for
            schedule variance on each route.
    pathways:
      type: object
      required:
        - pathway_id
        - from_stop_id
        - to_stop_id
        - pathway_mode
        - is_bidirectional
      properties:
        pathway_id:
          type: string
          description: >-
            The `pathway_id` field contains an ID that uniquely identifies the
            pathway. The `pathway_id` is used by systems as an internal
            identifier of this record (e.g., primary key in database), and
            therefore the `pathway_id` must be dataset unique.  

            Different pathways can go from the same `from_stop_id` to the same
            `to_stop_id`. For example, this happens when two escalators are side
            by side in opposite direction, or when a stair is nearby and
            elevator and both go from the same place to the same place.
        from_stop_id:
          type: string
          description: >-
            Location at which the pathway begins. It contains a `stop_id` that
            identifies a platform, entrance/exit, generic node or boarding area
            from the `stops.txt` file.
        to_stop_id:
          type: string
          description: >-
            Location at which the pathway ends. It contains a `stop_id` that
            identifies a platform, entrance/exit, generic node or boarding area
            from the `stops.txt` file.
        pathway_mode:
          type: string
          enum:
            - "0"
            - "1"
            - "2"
            - "3"
            - "4"
            - "5"
            - "6"
            - "7"
          description: >-
            Type of pathway between the specified (`from_stop_id`, `to_stop_id`)
            pair. Valid values for this field are:  

            • 1: walkway  

            • 2: stairs  

            • 3: moving sidewalk/travelator  

            • 4: escalator  

            • 5: elevator  

            • 6: fare gate (or payment gate): A pathway that crosses into an
            area of the station where a proof of payment is required (usually
            via a physical payment gate).  

            Fare gates may either separate paid areas of the station from unpaid
            ones, or separate different payment areas within the same station
            from each other. This information can be used to avoid routing
            passengers through stations using shortcuts that would require
            passengers to make unnecessary payments, like directing a passenger
            to walk through a subway platform to reach a busway.  

            • 7: exit gate: Indicates a pathway exiting an area where
            proof-of-payment is required into an area where proof-of-payment is
            no longer required.
        is_bidirectional:
          type: string
          enum:
            - "0"
            - "1"
          description: >-
            Indicates in which direction the pathway can be used:  

            • 0: Unidirectional pathway, it can only be used from `from_stop_id`
            to `to_stop_id`.  

            • 1: Bidirectional pathway, it can be used in the two directions.  
              
            Fare gates (`pathway_mode=6`) and exit gates (`pathway_mode=7`)
            cannot be bidirectional.
        length:
          $ref: "#/components/schemas/non_negative_float"
          description: >-
            Horizontal length in meters of the pathway from the origin location
            (defined in `from_stop_id`) to the destination location (defined in
            `to_stop_id`).  
              
            This field is recommended for walkways (`pathway_mode=1`), fare
            gates (`pathway_mode=6`) and exit gates (`pathway_mode=7`).
        traversal_time:
          $ref: "#/components/schemas/positive_integer"
          description: >-
            Average time in seconds needed to walk through the pathway from the
            origin location (defined in `from_stop_id`) to the destination
            location (defined in `to_stop_id`).  
              
            This field is recommended for moving sidewalks (`pathway_mode=3`),
            escalators (`pathway_mode=4`) and elevator (`pathway_mode=5`).
        stair_count:
          $ref: "#/components/schemas/non_null_integer"
          description: >-
            Number of stairs of the pathway.  
              
            Best Practices: one could use the approximation of 1 floor = 15
            stairs to generate approximative values.  
              
            A positive `stair_count` implies that the rider walk up from
            `from_stop_id` to `to_stop_id`. And a negative `stair_count` implies
            that the rider walk down from `from_stop_id` to `to_stop_id`.  
              
            This field is recommended for stairs (`pathway_mode=2`).
        max_slope:
          type: number
          format: float
          description: >-
            Maximum slope ratio of the pathway. Valid values for this field
            are:  

            • 0 or (empty): no slope.  

            • A float: slope ratio of the pathway, positive for upwards,
            negative for downwards.  
              
            This field should be used only with walkways (`pathway_type=1`) and
            moving sidewalks (`pathway_type=3`).  
              
            Example: In the US, 0.083 (also written 8.3%) is the maximum slope
            ratio for hand-propelled wheelchair, which mean an increase of
            0.083m (so 8.3cm) for each 1m.
        min_width:
          $ref: "#/components/schemas/positive_float"
          description: >-
            Minimum width of the pathway in meters.  
              
            This field is highly recommended if the minimum width is less than 1
            meter.
        signposted_as:
          $ref: "#/components/schemas/text"
          description: >-
            String of text from physical signage visible to transit riders. The
            string can be used to provide text directions to users, such as
            'follow signs to '. The language text should appear in this field
            exactly how it is printed on the signs - it should not be
            translated.
        reversed_signposted_as:
          $ref: "#/components/schemas/text"
          description: >-
            Same than the `signposted_as` field, but when the pathways is used
            backward, i.e. from the `to_stop_id` to the `from_stop_id`.
    levels:
      type: object
      required:
        - level_id
        - level_index
      properties:
        level_id:
          type: string
          description: Id of the level that can be referenced from `stops.txt`.
        level_index:
          type: number
          format: float
          description: >-
            Numeric index of the level that indicates relative position of this
            level in relation to other levels (levels with higher indices are
            assumed to be located above levels with lower indices).  
              
            Ground level should have index 0, with levels above ground indicated
            by positive indices and levels below ground by negative indices.
        level_name:
          $ref: "#/components/schemas/text"
          description: >-
            Optional name of the level (that matches level lettering/numbering
            used inside the building or the station). Is useful for elevator
            routing (e.g. “take the elevator to level “Mezzanine” or “Platforms”
            or “-1”).
    feed_info:
      type: object
      required:
        - feed_publisher_name
        - feed_publisher_url
        - feed_lang
      properties:
        feed_publisher_name:
          $ref: "#/components/schemas/text"
          description: >-
            Full name of the organization that publishes the dataset. This might
            be the same as one of the `agency.agency_name` values.
        feed_publisher_url:
          $ref: "#/components/schemas/url"
          description: >-
            URL of the dataset publishing organization's website. This may be
            the same as one of the `agency.agency_url` values.
        feed_lang:
          $ref: "#/components/schemas/language_code"
          description: >-
            Default language for the text in this dataset. This setting helps
            GTFS consumers choose capitalization rules and other
            language-specific settings for the dataset.  
              
            To define another language, use the `language` field in
            [translations.txt](https://developers.google.com/transit/gtfs/reference#translationstxt).  
              
            Multilingual datasets might be the default language with the
            original text in multiple languages. In such cases, use the [ISO
            639-2](https://www.loc.gov/standards/iso639-2/php/code_list.php)
            language code `mul` in the `feed_lang` field. Provide a translation
            for each of the languages used in the dataset in
            [translations.txt](https://developers.google.com/transit/gtfs/reference#translationstxt).
            If all of the original text in the dataset is in the same language,
            don't use `mul`.  
              
            For example, a dataset in Switzerland might set the original
            `stops.stop_name` field populated with stop names in different
            languages. Each stop name is written in accordance with the dominant
            language in that stop’s geographic location. Stop names include
            Genève for the French-speaking city of Geneva, Zürich for the
            German-speaking city of Zurich, and Biel/Bienne for the bilingual
            city of Biel/Bienne. Set `feed_lang=mul` and provide the following
            translations in
            [translations.txt](https://developers.google.com/transit/gtfs/reference#translationstxt):


            *   **German:** "Genf," "Zürich," and "Biel"

            *   **French:** "Genève," "Zurich," and "Bienne"

            *   **Italian:** "Ginevra," "Zurigo," and "Bienna"

            *   **English:** "Geneva," "Zurich," and "Biel/Bienne"
        default_lang:
          $ref: "#/components/schemas/language_code"
          description: >-
            Defines the language used when the data consumer doesn’t know the
            language of the rider. It's often defined as `en`, English.
        feed_start_date:
          $ref: "#/components/schemas/date"
          description: >-
            The dataset provides complete and reliable schedule information for
            service in the period from the beginning of the `feed_start_date`
            day to the end of the `feed_end_date` day. Both days can be left
            empty if unavailable. The `feed_end_date` date must not precede the
            `feed_start_date` date if both are given. Dataset providers are
            encouraged to give schedule data outside this period to advise of
            likely future service, but dataset consumers should treat it mindful
            of its non-authoritative status. If `feed_start_date` or
            `feed_end_date` extend beyond the active calendar dates defined in
            [calendar.txt](https://developers.google.com/transit/gtfs/reference#calendartxt)
            and
            [calendar\_dates.txt](https://developers.google.com/transit/gtfs/reference#calendar_datestxt),
            the dataset is making an explicit assertion that there is no service
            for dates within the `feed_start_date` to `feed_end_date` range but
            not included in the active calendar dates.
        feed_end_date:
          $ref: "#/components/schemas/date"
          description: Refer to the `feed_start_date` row in this table.
        feed_version:
          $ref: "#/components/schemas/text"
          description: >-
            String that indicates the current version of their GTFS dataset.
            GTFS-consuming applications can display this value to help dataset
            publishers determine whether the latest dataset has been
            incorporated.
        feed_contact_email:
          $ref: "#/components/schemas/email"
          description: >-
            Email address for communication regarding the GTFS dataset and data
            publishing practices. `feed_contact_email` is a technical contact
            for GTFS-consuming applications. Provide customer service contact
            information through
            [agency.txt](https://developers.google.com/transit/gtfs/reference#agencytxt).
        feed_contact_url:
          $ref: "#/components/schemas/url"
          description: >-
            URL for contact information, a web-form, support desk, or other
            tools for communication regarding the GTFS dataset and data
            publishing practices. `feed_contact_url` is a technical contact for
            GTFS-consuming applications. Provide customer service contact
            information through
            [agency.txt](https://developers.google.com/transit/gtfs/reference#agencytxt).
    translations:
      type: object
      required:
        - table_name
        - field_name
        - language
        - translation
      properties:
        table_name:
          type: string
          enum:
            - "agency"
            - "stops"
            - "routes"
            - "trips"
            - "stop_times"
            - "feed_info"
            - "pathways"
            - "levels"
            - "attributions"
          description: >-
            Defines the dataset table that contains the field to be translated.
            The following values are allowed:


            *   `agency`

            *   `stops`

            *   `routes`

            *   `trips`

            *   `stop_times`

            *   `feed_info`

            *   `pathways`

            *   `levels`

            *   `attributions`


            **Note:** Don't include the .txt file extension after the table's
            name.
        field_name:
          $ref: "#/components/schemas/text"
          description: >-
            Provides the name of the field to be translated. Fields with the
            type "Text" can be translated, while fields with the types "URL,"
            "Email," and "Phone number" can be included here to provide those
            resources in the correct language.


            **Note:** Fields with other types are ignored and will not be
            translated.
        language:
          $ref: "#/components/schemas/language_code"
          description: >-
            Provides the language of translation.


            If this language is the same as the one from `feed_lang` in
            [feed\_info.txt](https://developers.google.com/transit/gtfs/reference#feed_infotxt),
            the original value of the field is the default value used in
            languages without specific translations.


            For example, in Switzerland, a city in a bilingual canton is
            officially called "Biel/Bienne," but it would simply be called
            "Bienne" in French and "Biel" in German.
        translation:
          oneOf:
            - $ref: "#/components/schemas/text"
            - $ref: "#/components/schemas/url"
            - $ref: "#/components/schemas/email"
            - $ref: "#/components/schemas/phone_number"
          description: Provides the translated value for the specified `field_name`.
        record_id:
          type: string
          description: >-
            Defines the record that corresponds to the field to be translated.
            The value in `record_id` needs to be a main ID from a dataset table,
            as defined in the following table:


            `table_name`


            `record_id`


            `agency`


            `[agency_id](https://developers.google.com/transit/gtfs/reference#agencytxt)`


            `stops`


            `[stop_id](https://developers.google.com/transit/gtfs/reference#stopstxt)`


            `routes`


            `[route_id](https://developers.google.com/transit/gtfs/reference#routestxt)`


            `trips`


            `[trip_id](https://developers.google.com/transit/gtfs/reference#tripstxt)`


            `stop_times`


            `[trip_id](https://developers.google.com/transit/gtfs/reference#tripstxt)`


            `pathways`


            `[pathway_id](https://developers.google.com/transit/gtfs/reference#pathwaystxt)`


            `levels`


            `[level_id](https://developers.google.com/transit/gtfs/reference#levelstxt)`


            `attributions`


            `[attribution_id](https://developers.google.com/transit/gtfs/reference#attributionstxt)`


            The following conditions determine how this field can be used:


            *   Forbidden if `table_name` equals `feed_info`.

            *   Forbidden if `field_value` is defined.

            *   Required if `field_value` is empty.
        record_sub_id:
          type: string
          description: >-
            Helps to translate the record that contains the field when the table
            referenced in `record_id` doesn’t have a unique ID. The value in
            `record_sub_id` is the secondary ID of a dataset table, as defined
            in the following table:


            `table_name`


            `record_sub_id`


            `agency`


            `NONE`


            `stops`


            `NONE`


            `routes`


            `NONE`


            `trips`


            `NONE`


            `stop_times`


            `stop_sequence`


            `pathways`


            `NONE`


            `levels`


            `NONE`


            `attributions`


            `NONE`


            The following conditions determine how this field can be used:


            *   Forbidden if `table_name` equals `feed_info`.

            *   Forbidden if `field_value` is defined.

            *   Required if `table_name` equals `stop_times` and `record_id` is
            defined.
        field_value:
          oneOf:
            - $ref: "#/components/schemas/text"
            - $ref: "#/components/schemas/url"
            - $ref: "#/components/schemas/email"
            - $ref: "#/components/schemas/phone_number"
          description: >-
            Instead of using `record_id` and `record_sub_id` to define which
            record needs to be translated, `field_value` can be used to define
            the value for translation. When used, the translation is applied
            when the field identified by `table_name` and `field_name` contains
            the exact same value defined in `field_value`.


            The field must exactly match the value defined in `field_value`. If
            only a subset of the value matches `field_value`, the translation
            isn't applied.


            If two translation rules match the same record, one with
            `field_value` and the other one with `record_id`, then the rule with
            `record_id` is the one that needs to be used.


            The following conditions determine how this field can be used:


            *   Forbidden if `table_name` equals `feed_info`.

            *   Forbidden if `record_id` is defined.

            *   Required if `record_id` is empty.
    attributions:
      type: object
      required:
        - organization_name
      properties:
        attribution_id:
          type: string
          description: >-
            Identifies an attribution for the dataset, or a subset of it. This
            field is useful for translations.
        agency_id:
          type: string
          description: >-
            The agency to which the attribution applies. If one `agency_id`,
            `route_id`, or `trip_id` attribution is defined, the other fields
            must be empty. If none are specified, the attribution applies to the
            whole dataset.
        route_id:
          type: string
          description: >-
            This field functions in the same way as `agency_id`, except the
            attribution applies to a route. Multiple attributions can apply to
            the same route.
        trip_id:
          type: string
          description: >-
            This field functions in the same way as `agency_id`, except the
            attribution applies to a trip. Multiple attributions can apply to
            the same trip.
        organization_name:
          $ref: "#/components/schemas/text"
          description: The name of the organization that the dataset is attributed to.
        is_producer:
          $ref: "#/OrganizationHasRole"
        is_operator:
          $ref: "#/OrganizationHasRole"
        is_authority:
          $ref: "#/OrganizationHasRole"
        attribution_url:
          $ref: "#/components/schemas/url"
          description: The URL of the organization.
        attribution_email:
          $ref: "#/components/schemas/email"
          description: The email of the organization.
        attribution_phone:
          $ref: "#/components/schemas/phone_number"
          description: The phone number of the organization.
